<template lang="wxml">
  <view class="tab">
    <view class="{{ type == 'expend' ? 'active' : '' }}" @tap="choseTab('expend')">支出</view>
    <view class="{{ type == 'income' ? 'active' : '' }}" @tap="choseTab('income')">收入</view>
    <view class="{{ type == 'transfer' ? 'active' : '' }}" @tap="choseTab('transfer')">转账</view>
    <view class="{{ type == 'balance' ? 'active' : '' }}" @tap="choseTab('balance')">余额</view>
  </view>
  <form bindsubmit="formSubmit">
    <view class="container" wx:if="{{type == 'expend' || type == 'income'}}">
      <view class="column money">
        <text>金额</text>
        <input class="pull-right money-input {{ type }}" placeholder="0.00" placeholder-class="{{ type }}" name="amount" type="digit" value="{{ amount }}"/>
      </view>

      <navigator class="column zan-cell--access" url="/pages/statements/chose_category?type={{ type }}">
        <text>分类</text>
        <text class="pull-right" type="digit">{{ category_name }}</text>
        <input hidden  name="category_id" value="{{ category_id }}" type="number"/>
      </navigator>

      <view class="frequent-use" wx:if="{{ categories_label.length > 0 }}">
        <text>猜你想用：</text>
        <text class="label" wx:for="{{ categories_label }}" @tap="tabCategory({{item}})">{{ item.name }}</text>
      </view>

      <navigator class="column zan-cell--access" url="/pages/statements/chose_asset">
        <!-- 默认选中最常用的 -->
        <text>账户</text>
        <text class="pull-right">{{ asset_name }}</text>
        <input hidden name="asset_id" value="{{ asset_id }}" type="number"/>
      </navigator>

      <view class="frequent-use" wx:if="{{ assets_label.length > 0 }}">
        <text>猜你想用：</text>
        <text class="label" wx:for="{{ assets_label }}" @tap="tabAsset({{item}})">{{ item.name }}</text>
      </view>
      
      <picker class="column zan-cell--access" mode="date" start="2017-01-01" bindchange="dateChange">
        <text>日期</text>
        <text class="pull-right">{{ date }}</text>
        <input hidden name="date" value="{{ date }}" type="number"/>
      </picker>

      <view class="column">
        <text>备注</text>
        <input class="pull-right remark" type="text" name="description"  value="{{ description }}" placeholder="备注信息"/>
      </view>

      <view class="zan-btns" wx:if="{{ statement_id == 0 }}">
        <button class="zan-btn ljt-btn" formType="submit" @tap="submit">保存</button>
      </view>

      <view class="zan-btns" wx:else>
        <button class="ljt-btn" formType="submit" @tap="submit">保存</button>
        <button class="zan-btn zan-btn--danger zan-btn--plain" @tap="del">删除</button>
      </view>

      <input hidden type="text" name="type" value="{{ type }}"/>
    </view>

    <view class="container" wx:if="{{ type == 'transfer' }}">
      <view class="column money">
        <text>金额</text>
        <input class="pull-right money-input {{ type }}" placeholder="0.00" placeholder-class="{{ type }}" name="amount" type="digit" value="{{ amount }}"/>
      </view>

      <view class="column transfer-type">
        <view @tap="assetFrom">{{ source }}</view>
        <image @tap="exchangeAsset" class="transfer-icon" src="/public/images/transfer.png"></image>
        <view @tap="assetTo">{{ target }}</view>
      </view>

      <picker class="column zan-cell--access" mode="date" start="2017-01-01" bindchange="dateChange">
        <text>日期</text>
        <text class="pull-right">{{ date }}</text>
        <input hidden name="date" value="{{ date }}" type="number"/>
      </picker>

      <view class="column">
        <text>备注</text>
        <input class="pull-right remark" type="text" name="description"  value="{{ description }}" placeholder="备注信息"/>
      </view>

      <view class="zan-btns">
        <button class="zan-btn ljt-btn" formType="submit" @tap="submit">保存</button>
      </view>
    </view>

    <view class="container" wx:if="{{ type == 'balance' }}">
      <view class="column money">
        <text>余额</text>
        <input class="pull-right money-input" placeholder="0.00" name="amount" type="digit" value="{{ amount }}"/>
      </view>

      <navigator class="column zan-cell--access" url="/pages/statements/chose_category?type={{ type }}">
        <text>分类</text>
        <text class="pull-right" type="digit">{{ category_name }}</text>
        <input hidden  name="category_id" value="{{ category_id }}" type="number"/>
      </navigator>

      <view class="zan-btns">
        <button class="ljt-btn" formType="submit" @tap="submit">保存</button>
      </view>
    </view>

  </form>
</template>

<script>
	import wepy from 'wepy'
  import api from "../../utils/api"
  import tip from '../../utils/tip'
  export default class NewStatement extends wepy.page {
    config = {
      navigationBarTitleText: '记一笔'
    }

		data = {
      method: 'POST',
      statement_id: 0,
      type: 'expend',
      amount: '',
      category_id: 0,
      category_name: '请选择分类',
      asset_id: 0,
      asset_name: '请选择账户',
      description: '',
      date: '',
      assets_label: [],
      categories_label: [],
      asset_log_id: 0,
      source: '请选择账户',
      target: '请选择账户',
      from: 0,
      to: 0,
      transferType: 0
    }

    onLoad(options) {
      const myDate = new Date()
      let year = myDate.getFullYear()
      let month = myDate.getMonth() + 1
      let day = myDate.getDate()
      if (month < 10) month = `0${month}`
      if (day < 10) day = `0${day}`
      this.date = [year, month, day].join('-')

      if (options.id != undefined) {
        this.getStatement(options.id)
      } else if (options.asset_log_id != undefined) {
        this.getTransfer(options.asset_log_id)
      } else {
        // 获取上次使用的分类和账户
        this.getLastUsed()
      }
      this.guessCategory()
      this.guessAsset()
    }

    computed = {
      active () {
        return this.type == 'expend'
      }
    }

    methods = {
      async formSubmit (e) {
        let statement = e.detail.value
        statement.type = this.type
        if (statement.amount == 0 || statement.amount == '') {
          tip.error('金额不能为零')
          return false
        }

        if (statement.category_id == 0) {
          tip.error('未选择分类')
          return false
        }

        if (statement.asset_id == 0) {
          tip.error('未选择账户')
          return false
        }

        if (this.type == 'transfer') {
          if (this.from == 0 || this.to == 0) {
            tip.error('未选择转账分类')
            return false
          } else if (this.from == this.to) {
            tip.error('不能转去同一类型')
            return false
          }else {
            statement.from = this.from
            statement.to = this.to
          }
        }

        const localDate = new Date();
        statement.time = [localDate.getHours(), localDate.getMinutes(), localDate.getSeconds()].join(':')
        statement.asset_log_id = this.asset_log_id
        const res = await api.Statement({
          showLoading: true,
          method: this.method,
          query: {
            statement: statement
          }
        }, this.statement_id);
        const result = res.data
        if (result.status == 200) {
          wepy.navigateBack({
            delta: 1
          })
          // 保存成功后更新上个页面的数据
          // this.updatePrevPage(result.msg.id, this.method)
        } else {
          tip.error(result.msg)
        }
      },
      dateChange(e) {
        this.date = e.detail.value
      },
      choseTab (type) {
        if (this.type != type) {
          this.category_id = 0
          this.category_name = '请选择分类'
        }
        this.type = type
        this.guessCategory()
        this.guessAsset()
      },
      tabAsset (asset) {
        this.asset_id = asset.id
        this.asset_name = asset.name
      },
      tabCategory (category) {
        this.category_id = category.id
        this.category_name = category.name
      },
      assetFrom () {
        this.transferType = 1
        wx.navigateTo({ url: "/pages/statements/chose_asset" })
      },
      assetTo () {
        this.transferType = 2
        wx.navigateTo({ url: "/pages/statements/chose_asset" })
      },
      exchangeAsset () {
        let tmp1 = this.source
        this.source = this.target
        this.target = tmp1

        let tmp2 = this.from
        this.from = this.to
        this.to = tmp2
      }
    }

    async getStatement (id) {
      const res = await api.Statement({showLoading: true}, id);
      const statement = res.data
      if (statement.status != undefined && statement.status != 200) {
        wepy.navigateBack({
          delta: 1
        })
        tip.error('无效的账单')
      }
      this.method = 'PUT'
      this.statement_id = statement.id
      this.type = statement.type
      this.amount = statement.amount
      this.category_id = statement.category_id
      this.asset_id = statement.asset_id
      this.description = statement.description
      this.date = statement.date
      this.category_name = statement.category_name
      this.asset_name = statement.asset_name
      this.$apply()
    }

    async getTransfer (id) {
      // 获取转账信息

    }

    async del () {
      await tip.confirm('确定删除该条记录？', {}, '提示')
      const res = await api.Statement({showLoading: true, method: 'DELETE'}, this.statement_id);
      this.updatePrevPage(this.statement_id, 'delete')
      wepy.navigateBack({
        delta: 1
      })
    }

    async getLastUsed() {
      const res = await api.StatementFrequentUsed({
        showLoading: true,
        query: {
          type: this.type
        }
      });
      const result = res.data
      this.category_id = result.category_id
      this.asset_id = result.asset_id
      this.category_name = result.category_name
      this.asset_name = result.asset_name
      this.$apply()
    }

    async guessCategory () {
      const res = await api.guessCategory({
        query: {
          type: this.type
        }
      });
      this.categories_label = res.data
      this.$apply()
    }

    async guessAsset () {
      const res = await api.guessAsset();
      this.assets_label = res.data
      this.$apply()
    }

    updatePrevPage(id, method) {
      const pages = getCurrentPages()
      const prevPage = pages[pages.length - 2]
      const path = prevPage.route
      if (path == 'pages/index') {
        prevPage.updateStatement(id, method.toLowerCase())
      }
    }

    setCategory (category) {
      this.category_id = category.id
      this.category_name = category.name
    }

    setAsset (asset) {
      if (this.type != 'transfer') {
        this.asset_id = asset.id
        this.asset_name = asset.name
      } else {
        if (this.transferType == 1) {
          this.source = asset.name
          this.from = asset.id
        } else {
          this.target = asset.name
          this.to = asset.id
        }
      }
    }

  }
</script>
<style lang="scss" src="../../public/styles/statement/statement.scss"></style>