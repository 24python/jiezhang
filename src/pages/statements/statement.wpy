<template lang="wxml">
  <form bindsubmit="formSubmit">
    <view class="container">
      <view class="column money">
        <text>金额</text>
        <input class="pull-right money-input expend" name="amount" type="digit" value="{{ amount }}"/>
      </view>

      <navigator class="column zan-cell--access" url="/pages/statements/chose_category?type={{ type }}">
        <text>分类</text>
        <text class="pull-right" type="digit">{{ category_name }}</text>
        <input hidden  name="category_id" value="{{ category_id }}" type="number"/>
      </navigator>

      <navigator class="column zan-cell--access" url="/pages/statements/chose_asset">
        <!-- 默认选中最常用的 -->
        <text>账户</text>
        <text class="pull-right">{{ asset_name }}</text>
        <input hidden name="asset_id" value="{{ asset_id }}" type="number"/>
      </navigator>

      <picker class="column zan-cell--access" mode="date" start="2017-01-01" bindchange="dateChange">
        <text>日期</text>
        <text class="pull-right">{{ date }}</text>
        <input hidden name="time" value="{{ date }}" type="number"/>
      </picker>

      <view class="column">
        <text>备注</text>
        <input class="pull-right remark" type="text" name="description"  value="{{ description }}" placeholder="备注信息"/>
      </view>

      <view class="zan-btns">
        <button class="zan-btn zan-btn--danger" formType="submit" @tap="submit">保存</button>
      </view>

      <input hidden type="text" name="type" value="{{ type }}"/>

    </view>
    <category></category>
  </form>
</template>

<script>
	import wepy from 'wepy'
  import api from "../../utils/api"
  import tip from '../../utils/tip'
  export default class NewStatement extends wepy.page {
    config = {
      navigationBarTitleText: '记一笔'
    }

		data = {
      method: 'POST',
      statement_id: 0,
      type: 'expend',
      amount: 0,
      category_id: 0,
      category_name: '请选择分类',
      asset_id: 0,
      asset_name: '请选择账户',
      description: '',
      date: ''
    }

    onLoad(options) {
      const myDate = new Date()
      let year = myDate.getFullYear()
      let month = myDate.getMonth() + 1
      let day = myDate.getDate()
      if (month < 10) month = `0${month}`
      if (day < 10) day = `0${day}`
      this.date = [year, month, day].join('-')
      if (options.id != undefined) {
        this.getStatement(options.id)
      } else {
        // 获取上次使用的分类和账户
        this.getLastUsed()
      }
    }

    methods = {
      async   formSubmit (e) {
        let statement = e.detail.value
        if (statement.amount == 0) {
          tip.error('金额不能为零')
          return false
        }

        if (statement.category_id == 0) {
          tip.error('未选择分类')
          return false
        }

        if (statement.asset_id == 0) {
          tip.error('未选择账户')
          return false
        }
        
        const res = await api.Bill({
          method: this.method,
          query: {
            statement: statement
          }
        }, this.statement_id);
        const result = res.data
        if (result.status == 200) {
          wepy.navigateBack({
            delta: 1
          })
          // 保存成功后更新上个页面的数据
          this.updatePrevPage(result.msg.id, this.method)
        } else {
          tip.error(result.msg)
        }
      },
      dateChange(e) {
        this.date = e.detail.value
      }
    }

    async getStatement (id) {
      const res = await api.Bill({showLoading: true}, id);
      const statement = res.data
      if (statement.status != undefined && statement.status != 200) {
        wepy.navigateBack({
          delta: 1
        })
        tip.error('无效的账单')
      }
      this.method = 'PUT'
      this.statement_id = statement.id
      this.type = statement.type
      this.amount = statement.amount
      this.category_id = statement.category_id
      this.asset_id = statement.asset_id
      this.description = statement.description
      this.date = statement.date
      this.category_name = statement.category_name
      this.asset_name = statement.asset_name
      this.$apply()
    }

    async getLastUsed() {
      const res = await api.getBillFrequentUsed({
        showLoading: true,
        query: {
          type: this.type
        }
      });
      const result = res.data
      this.category_id = result.category_id
      this.asset_id = result.asset_id
      this.category_name = result.category_name
      this.asset_name = result.asset_name
      this.$apply()
    }

    updatePrevPage(id, method) {
      const pages = getCurrentPages()
      const prevPage = pages[pages.length - 2]
      const path = prevPage.route
      if (path == 'pages/index') {
        prevPage.updateStatement(id, method.toLowerCase())
      }
    }

    setCategory (category) {
      this.category_id = category.id
      this.category_name = category.name
    }

    setAsset (asset) {
      this.asset_id = asset.id
      this.asset_name = asset.name
    }
  }
</script>
<style lang="less">
  page {
    background: #efefef;
  }
  .container {
    > .money {
      height:130rpx !important;
      line-height: 130rpx !important;
    }
    > .column {
      height: 120rpx;
      line-height: 120rpx;
      padding:0 24rpx;
      border-bottom: 1px solid #efefef;
      font-size: 32rpx;
      background: white;
      > text:last-child {
        color: #999;
      }
      .remark {
        height:120rpx !important;
        line-height: 120rpx !important;
        text-align: right;
      }
    }
    .money-input {
      height: 130rpx;
      font-size: 56rpx;
      text-align: right;
    }
  }
</style>