<template lang="wxml">
  <view class="tab" wx:if="{{ !(type == 'transfer' && method == 'PUT') }}">
    <view class="{{ current == 0 ? 'active' : '' }}" @tap="choseTab(0)">支出</view>
    <view class="{{ current == 1 ? 'active' : '' }}" @tap="choseTab(1)">收入</view>
    <view class="{{ current == 2 ? 'active' : '' }}" @tap="choseTab(2)">转账</view>
  </view>
    <swiper indicator-dots="{{indicatorDots}}" current="{{ current }}" style="height: {{ swiperHeight }}px;" bindchange="swiperChange">
      <swiper-item>
        <expend-statement :statement="statement" type="expend"></expend-statement>
      </swiper-item>
      
      <swiper-item>
        <income-statement :statement="statement" type="income"></income-statement>
      </swiper-item>

      <swiper-item>
        <TransferForm :type="type"></TransferForm>
      </swiper-item>
    </swiper>
</template>

<script>
	import wepy from 'wepy'
  import wxRequest from '@/utils/wxRequest'
  import { mapKey } from '@/utils/host'
  import Session from '@/utils/session'
  import tip from '@/utils/tip'
  import QQMapWX from '@/utils/qqmap-wx-jssdk.js'
  import StatementForm from '@/components/statement_form'
  import TransferForm from '@/components/transfer_form'
  export default class NewStatement extends wepy.page {
    config = {
      navigationBarTitleText: '记一笔'
    }

		data = {
      method: 'POST',
      current: 0,
      indicatorDots: false,
      statement: {},
      statement_id: 0,
      type: 'expend',
      amount: '',
      category_id: 0,
      category_name: '请选择分类',
      asset_id: 0,
      asset_name: '请选择账户',
      description: '',
      date: '',
      address: '',
      assets_label: [],
      categories_label: [],
      // 转账信息
      asset_log_id: 0,
      source: '请选择账户',
      target: '请选择账户',
      from: 0,
      to: 0,
      transferType: 0,
      switchCheck: Session.get('getLocationSwitch') || false,
      qqmapSDK: null,
      nation: '',
      province: '',
      city: '',
      district: '',
      street: '',
      submiting: false,
      swiperHeight: 400
    }

    async onLoad(options) {
      wx.getSystemInfo({
        success: (res) => {
          this.swiperHeight = res.windowHeight - 40
          this.$apply()
        }
      })

      if (options.id != undefined) {
        this.getStatement(options.id)
      } else if (options.asset_log_id != undefined) {
        this.getTransfer(options.asset_log_id)
      } 

      if (this.switchCheck) {
        // 初始化地理位置信息
        this.setLocation()
      }

      if (options.type) {
        this.type = options.type
        this.from = options.asset_id
        this.source = options.source
      }
    }

    components = {
      'expend-statement': StatementForm,
      'income-statement': StatementForm,
      TransferForm
    }

    computed = {
      active () {
        return this.type == 'expend'
      }
    }

    methods = {
      async formSubmit (e) {
        let statement = e.detail.value
        statement.type = this.type
        if (statement.amount == 0 || statement.amount == '') {
          tip.error('金额不能为零')
          return false
        }

        if (statement.category_id == 0) {
          tip.error('未选择分类')
          return false
        }

        if (statement.asset_id == 0) {
          tip.error('未选择账户')
          return false
        }

        if (this.type == 'transfer') {
          if (this.from == 0 || this.to == 0) {
            tip.error('未选择转账分类')
            return false
          } else if (this.from == this.to) {
            tip.error('不能转去同一类型')
            return false
          }else {
            statement.from = this.from
            statement.to = this.to
          }
        }

        const localDate = new Date();
        statement.time = [localDate.getHours(), localDate.getMinutes(), localDate.getSeconds()].join(':')
        statement.asset_log_id = this.asset_log_id
        if (this.type == 'transfer' && this.method == 'PUT') {
          this.statement_id = this.asset_log_id
        }
        
        let result = null
        this.submiting = true
        if (this.method == 'POST') {
          result = await wxRequest.Post(`statements`, {statement: statement})
        } else {
          result = await wxRequest.Put(`statements/${this.statement_id}`, {statement: statement})
        }
        
        if (result.status == 200) {
          wepy.navigateBack({
            delta: 1
          })
          // 保存成功后更新上个页面的数据
          this.updatePrevPage()
        } else {
          tip.error(result.msg)
        }
        this.submiting = false
      },
      choseTab (current) {
        this.current = current
      },
      swiperChange (e) {
        this.current = e.detail.current
      },
      getLocation (e) {
        let locationSwitch = e.detail.value
        Session.set('getLocationSwitch', locationSwitch)
        if(locationSwitch) {
          this.setLocation()
        } else {
          // 关闭获取地理位置
          this.address = ''
          this.$apply()
        }
      }
    }

    async getStatement (id) {
      const statement = await wxRequest.Get(`statements/${id}`)
      if (statement.status != undefined && statement.status != 200) {
        wepy.navigateBack({
          delta: 1
        })
        tip.error('无效的账单')
      }
      this.method = 'PUT'
      this.statement_id = statement.id
      this.type = statement.type
      this.amount = statement.amount
      this.category_id = statement.category_id
      this.asset_id = statement.asset_id
      this.description = statement.description
      this.date = statement.date
      this.category_name = statement.category_name
      this.asset_name = statement.asset_name
      this.$apply()
    }

    async getTransfer (id) {
      // 获取转账信息
      this.type = 'transfer'
      const data = await wxRequest.Get(`transfer/${id}`)
      this.method = 'PUT'
      this.asset_log_id = data.id
      this.amount = data.amount
      this.from = data.from
      this.to = data.to
      this.description = data.description
      this.date = data.date
      this.source = data.source
      this.target = data.target
      this.$apply()
    }

    setLocation () {
      this.qqmapSDK = new QQMapWX({
        key: mapKey
      });
      try {
        wx.getLocation({
          type: 'gcj02', //返回可以用于wx.openLocation的经纬度
          success: (result) => {
            this.qqmapSDK.reverseGeocoder({
              location: {
                latitude: result.latitude,
                longitude: result.longitude
              },
              success: (addressRes) => {
                let address_component = addressRes.result.address_component
                this.nation = address_component.nation
                this.province = address_component.province
                this.city = address_component.city
                this.district = address_component.district
                this.street = address_component.street
                this.address = addressRes.result.address
                this.$apply()
              }
            })
          }
        })
      } catch (e) {
        console.log('errorMsg', e)
        Session.set('getLocationSwitch', false)
        this.switchCheck = false
        this.$apply()
      }
    }

    // 接受 chose_category 选择后的回调函数
    // setCategoryCallback () {

    // }

    // setAssetCategoryCallback () {

    // }

    // FIXME: 应该全局维护同一个
    updatePrevPage() {
      const pages = getCurrentPages()
      const prevPage = pages[pages.length - 2]
      const path = prevPage.route
      if (path == 'pages/index') {
        prevPage.updateStatement()
      }
    }

  }
</script>
<style lang="scss" src="../../public/styles/statement/statement.scss"></style>