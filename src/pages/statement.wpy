<template>
  <view class="container">

    <view class="header">
      <text class="{{ statement.type == 'expend' ? 'active' : '' }}" @tap="changeType('expend')">支出</text>
      <text class="{{ statement.type == 'income' ? 'active' : '' }}" @tap="changeType('income')">收入</text>
    </view>

    <view class="mark-header" @tap='showCaculate'>
      <view class="icon-name pull-left fs18">{{ curCategoryName }}</view>
      <view class="amount pull-right fs18">
        <view class="fs21 {{ statement.type }}">{{ statement.amount }}</view>
      </view>
    </view>

    <swiper indicator-dots="{{indicatorDots}}" autoplay="{{autoplay}}" style="height: {{ curCategoryHeight }}px;">
      <swiper-item wx:for="{{categories}}">
        <view class="category-flex">
          <view wx:for="{{item}}" data-category-name="{{ item.name }}" data-category-id="{{ item.id }}" bindtap="categoryChange">
            <view class="image"><image style="background: {{ item.bg_color }};" src="{{ item.icon }}"></image></view>
            <view class="name">{{ item.name }}</view>
          </view>
        </view>
      </swiper-item>
      
    </swiper>

    <view class="item-category">
      <text>账户</text>
      <picker mode="multiSelector" bindchange="assetChange" bindcolumnchange="bindMultiPickerColumnChange" value="{{ multiIndex }}" range="{{ multiArray }}" range-key="name">
        <view class="picker">
          {{ multiArray[1][multiIndex[1]]['name'] }}
        </view>
      </picker>
    </view>

    <view class="item-category">
      <text>日期</text>
      <view>
        <picker mode="date" value="{{ statement.date }}" start="2017-01-01" end="{{ dateEndAt }}" bindchange="dateChange">
          <view class="picker">
            {{ statement.date }}
          </view>
        </picker>
      </view>
    </view>

    <view class="item-category">
      <text>时间</text>
      <view>
        <picker mode="time" value="{{ statement.time }}" bindchange="TimeChange">
          <view class="picker">
            {{ statement.time }}
          </view>
        </picker>
      </view>
    </view>

    <view class="item-category">
      <input class="weui-input remark" value="{{ statement.description }}" placeholder="备注" bindinput="InputChange" />
    </view>
    
    <view class="save-btn">
      <view class="bill-btn" @tap="submit('true')" wx:if="{{ statement.id == 0 }}">再记一笔</view>
      <view class="bill-btn" @tap="del" wx:else>删除</view>
      <view class="bill-btn save" @tap="submit">保存</view>
    </view>

    <caculate @invokeCaculation.user="invokeCaculation" hidden="{{ !showCaculation }}"></caculate>
  </view>
  
</template>

<script>
  import wepy from 'wepy'
  import api from "../api/api"
  import tip from '../utils/tip'
  import Caculate from '../components/caculate'

  export default class Statement extends wepy.page {
    data = {
      showCaculation: false,
      indicatorDots: true,
      autoplay: false,
      //分类
      categories: [],
      expendCategories: [],
      incomeCategories: [],
      curCategoryHeight: '470',
      // 当前选中分类
      curCategoryName: '',
      // 账单数据
      statement: {
        id: 0,
        category_id: 0,
        asset_id: 0,
        amount: 0,
        type: 'expend',
        description: '',
        year: 0,
        month: 0,
        day: 0,
        date: "",
        time: ""
      },
      // 日历 picker 的起始与结束时间
      dateStartAt: '',
      dateEndAt: '',

      // 账户
      assets: [],
      multiArray: [[], []],
      multiIndex: [0, 0],
      defaultAsset: 0
    }

    components = {
      caculate: Caculate
    };

    onLoad (options) {
      let myDate = new Date();
      if (this.statement.date != '') {
        myDate = new Date(this.statement.date)
      }
      let year = myDate.getFullYear()
      let month = myDate.getMonth() + 1
      let day = myDate.getDate()
      let hour = myDate.getHours()
      let min = myDate.getMinutes()
      if (hour < 10) hour = `0${hour}`
      if (min < 10) min = `0${min}`
      if (month < 10) month = `0${month}`
      if (day < 10) day = `0${day}`

      let time = [hour, min].join(':')
      if (this.statement.time != '') time = this.statement.time
      this.statement.date = [year, month, day].join('-')
      this.statement.time = time
      this.dateEndAt = `${year}-${month}-${day}`
      if (options.id != undefined) {
        this.statement.id = options.id
        this.getStatement(options.id)
      }
      
      // 保证获取分类与账户在获取账单之后, 寻找更好的方法？
      // setTimeout(() => {
        this.getCategory()
        this.getAssets()
      // }, 300);
      
    }

    methods = {
      changeType(item) {
        let categories = []
        if (item == 'expend') {
          categories = this.expendCategories
        } else {
          categories = this.incomeCategories
        }
        if (categories.length > 0) {
          this.curCategoryName = categories[0][0]['name']
          this.statement.category_id = categories[0][0]['id']
          this.curCategoryHeight = Math.ceil(categories[0].length * 1 / 5) * 65
        }
        this.statement.type = item
        this.categories = categories
      },
      categoryChange (e) {
        let categoroyId = e.currentTarget.dataset.categoryId
        let name = e.currentTarget.dataset.categoryName
        this.statement.category_id = categoroyId
        this.curCategoryName = name
      },
      assetChange(e) {
        let child_idx = e.detail.value[1]
        let parent_id = e.detail.value[0]
        parent_id = this.assets['parent_assets'][parent_id]['id']
        this.statement.asset_id = this.assets['child_assets'][parent_id][child_idx]['id']
      },
      // 日期改变
      dateChange(e) {
        this.statement.date = e.detail.value
      },
      // 时间改变
      TimeChange(e) {
        this.statement.time = e.detail.value
      },
      // 备注更改
      InputChange (e) {
        this.statement.description = e.detail.value
      },
      // 账户栏的列变更
      bindMultiPickerColumnChange (e) {
        let value = e.detail.value
        if(e.detail.column === 0) {
          let id = this.assets.parent_assets[value]['id']
          this.multiIndex[0] = value
          this.multiArray[1] = this.assets.child_assets[id]
        } else {
          this.multiIndex[1] = value
        }
      },
      showCaculate() {
        this.showCaculation = true
      },
      invokeCaculation(amount) {
        this.statement.amount = amount
        this.showCaculation = false
      },
      async del () {
        await tip.confirm('是否删除该记录？')
        const res = await api.Bill({
          method: 'DELETE'
        }, this.statement.id)
        if (res.data.status == 200) {
          this.updatePrevPage(this.statement.id, 'DELETE')
          wepy.navigateBack({
            delta: 1
          })
        } else {
          tip.error(res.data.msg)
        }
      },
      async submit (redirectTo = false) {
        let method = 'POST'
        let cId = null

        if (this.statement.amount == 0) {
          tip.error('金额不能为 0')
          return false
        }

        if (this.statement.asset_id == 0) {
          tip.error('账户未选择')
          return false
        }

        if (this.statement.category_id == 0) {
          tip.error('分类未选择')
          return false
        }


        if (this.statement.id != 0) {
          method = 'PUT'
          cId = this.statement.id
        }

        const res = await api.Bill({
          method: method,
          query: {
            statement: this.statement
          }
        }, cId);

        if (res.data.status == 200) {
          if (redirectTo != 'true') {
            wepy.navigateBack({
              delta: 1
            })
          } else {
            wepy.redirectTo({
              url: '/pages/statement'
            })
          }
          // 保存成功后更新上个页面的数据
          this.updatePrevPage(res.data.msg.id, method)
        } else {
          tip.error(res.data.msg)
        }
      }
    }

    updatePrevPage(id, method) {
      const pages = getCurrentPages()
      const prevPage = pages[pages.length - 2]
      const path = prevPage.route
      if (path == 'pages/index') {
        prevPage.updateStatement(id, method.toLowerCase())
      }
    }

    async getStatement (id) {
      const res = await api.Bill({}, id);
      if (res.data.status != undefined && res.data.status != 200) {
        wepy.navigateBack({
          delta: 1
        })
        tip.error('无效的账单')
      }
      this.statement = res.data
      this.$apply()
    }

    async getCategory () {
      const res = await api.getBillCategories()
      const data = res.data
      let categories = this.statement.type == 'income' ? data.income_categories : data.expend_categories
      let cur_name = categories[0][0]['name']
      if (this.statement.category_id != 0) {
        for (let i = 0;i < categories.length;++i) {
          for(let j = 0;j < categories[i].length; ++j) {
            if (this.statement.category_id == categories[i][j]['id']) {
              cur_name = categories[i][j]['name']
            }
          }
        }
      }
      this.categories = categories
      this.expendCategories = data.expend_categories
      this.incomeCategories = data.income_categories
      this.curCategoryName = cur_name
      if (categories.length > 0) {
        this.curCategoryHeight = Math.ceil(categories[0].length * 1 / 5) * 65
      }
      if (categories.length > 0 && this.statement.category_id == 0) {
        try {
          this.statement.category_id = categories[0][0]['id']
        } catch (error) {
          this.statement.category_id = 0
        }
      }
      this.$apply()
    }

    async getAssets() {
      const res = await api.getBillAssets()
      const data = res.data
      let arr = []
      let childs = data.child_assets[data.parent_assets[0]['id']]
      arr.push(data.parent_assets)
      arr.push(childs)
      this.assets = data
      this.multiArray = arr
      if (childs.length > 0 && this.statement.asset_id == 0) {
        try {
          this.statement.asset_id = childs[0]['id']
        } catch (error) {
          this.statement.asset_id = 0
        }
      }
      this.$apply()
    }
  }
</script>
<style lang="less">
swiper {
  // height:290rpx;
  // height: 500rpx;
  background:#f8f8f8;
  border-bottom:1px solid #ccc;
}
.header {
  background: #fb4b4d;
  border-bottom: #fb4b4d;
  text-align: center;
  color: #fff;
  font-size: 16px;
  padding: 4px 0;
}

.header .save {
  float: right;
  padding: 0;
  padding-right: 2px;
  position: absolute;
  right: 10px;
}

.header text {
  padding: 4px 16px;
}

.header text.active {
  border-bottom: 2px solid #fff;
}

.item-category text {
  font-size: 12px;
}

/* .mark-header.expend, .header.expend{
  background: linear-gradient(to right,rgba(9,187,7, 1), rgba(9,187,7, 0.7));
}
.mark-header.income, .header.income{
  background: linear-gradient(to right,rgba(251,75,77, 1), rgba(251,75,77, 0.7));
} */
.mark-header  {
   padding: 10px 16px;
   overflow: hidden;
   border-bottom:1px solid #ccc;
  .icon-name, .amount {
    font-weight: bold;
    text-align: right;
  }
}

.item-category {
  padding: 0 16px 8px 16px;
  border-bottom: 1px solid #ccc;
}

.item-category:last-child {
  padding-top: 8px;
}

.item-category > text {
  font-size: 12px;
}

.item-category > view {
  font-size: 14px;
}

.item-category .remark {
  min-height: 2em;
  height: 2em;
  font-size: 16px;
  padding-top: 8px;
}

/* caculation */

.caculation {
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100%;
  z-index: 666;
}

.caculation .close {
  width: 35px;
  position: absolute;
  right: 0;
  top: -26px;
  text-align: center;
  background: #efefef;
  border: 1px solid #ccc;
  height: 25px;
}

.caculation .close image {
  width: 20px;
  height: 25px;
  display: inline-block;
}

.caculation .btnGroup {
  display: flex;
  flex-direction: row;
  border-top: 1px solid #323546;
}

.caculation .btnGroup > .item {
  text-align: center;
  width: 25%;
  padding: 14px 0;
  background: #3e4052;
  border-left: 1px solid #323546;
  color: white;
}

.caculate-back {
  width: 25px;
  height: 25px;
  margin-top: 5px;
}

.caculation .btnGroup > .item:first-child {
  border-left: none;
}

/* Picker */

.picker-view {
  position: fixed;
  left: 0;
  bottom: 0;
  width: 100%;
  height: 300px;
  z-index: 999;
}
.picker {
  font-size:14px;
}
.save-btn {
  width: 100%;
  text-align: center;
  margin:12px 0;
}

.save-btn > .bill-btn {
  margin: 0 4%;
}

.save {
  background: #fb4b4d;
  color: white !important;
}

.bill-btn {
  border: 1px solid #fb4b4d;
  display: inline-block;
  padding: 4px 0;
  width: 40%;
  color: #fb4b4d;
  text-align: center;
  font-size: 18px;
}

.category-flex {
  overflow:hidden;
}  
.category-flex image {
  width: 30px;
  height: 30px;
}
.category-flex > view {
  width: 20%;
  float: left;
  text-align:center;
  margin-top: 8px;
}
.category-flex .image {
  height: 30px;
}
.category-flex .name {
  color: #999;
  font-size: 24rpx;
  margin-top: 2px;
}
.item-category > text {
  color: #999;
}
.cur-asset {
  font-size: 14px;
}
</style>