<template>
  <view class="container">

    <view class="header">
      <text data-item="expend" class="{{ statement.type == 'expend' ? 'active' : '' }}" bindtap="changeType">支出</text>
      <text data-item="income" class="{{ statement.type == 'income' ? 'active' : '' }}" bindtap="changeType">收入</text>
    </view>

    <view class="mark-header {{ statement.type }}" bindtap='showCaculation'>
      <view class="icon-name">{{ curCategoryName }}</view>
      <view class="amount pull-right">
        <view>{{ statement.amount }}</view>
        <view> {{ formula }}</view>
      </view>
    </view>

    <swiper indicator-dots="{{indicatorDots}}" autoplay="{{autoplay}}">
      <swiper-item wx:for="{{categories}}">
        <view class="category-flex">
          <view wx:for="{{item}}" data-category-name="{{ item.name }}" data-category-id="{{ item.id }}" bindtap="categoryChange">
            <view class="image"><image style="background: {{ item.bg_color }};" src="../../public/{{ item.icon }}"></image></view>
            <view class="name">{{ item.name }}</view>
          </view>
        </view>
      </swiper-item>
      
    </swiper>

    <view class="item-category">
      <text>账户</text>
      <picker mode="multiSelector" bindchange="assetChange" bindcolumnchange="bindMultiPickerColumnChange" value="{{multiIndex}}" range="{{multiArray}}" range-key="name">
        <view class="picker">
          {{ multiArray[1][multiIndex[1]]['name'] }}
        </view>
      </picker>
    </view>

    <view class="item-category">
      <text>日期</text>
      <view>
        <picker mode="date" value="{{ statement.date }}" start="2017-01-01" end="2020-01-01" bindchange="dateChange">
          <view class="picker">
            {{ statement.date }}
          </view>
        </picker>
      </view>
    </view>

    <view class="item-category">
      <text>时间</text>
      <view>
        <picker mode="time" value="{{ statement.time }}" bindchange="TimeChange">
          <view class="picker">
            {{ statement.time }}
          </view>
        </picker>
      </view>
    </view>

    <view class="item-category">
      <input class="weui-input remark" value="{{ remark }}" placeholder="备注" bindinput="InputChange" />
    </view>
    
    <view class="save-btn">
      <view class="bill-btn" bindtap="submitContinue">再记一笔</view>
      <view class="bill-btn save" bindtap="submit">保存</view>
    </view>

    <view class="caculation" wx:if="{{ showCaculation }}">
      <!-- <view class="close" bindtap='hideCaculation'><image src="../../public/images/down.png"></image></view> -->
      <view class="btnGroup">
        <view class="item" data-num="7" bindtap="caculatBtn">7</view>
        <view class="item" data-num="8" bindtap="caculatBtn">8</view>
        <view class="item" data-num="9" bindtap="caculatBtn">9</view>
        <view class="item" data-num="minus" bindtap="caculatBtn">-</view>
      </view>
      <view class="btnGroup">
        <view class="item" data-num="4" bindtap="caculatBtn">4</view>
        <view class="item" data-num="5" bindtap="caculatBtn">5</view>
        <view class="item" data-num="6" bindtap="caculatBtn">6</view>
        <view class="item" data-num="plus" bindtap="caculatBtn">+</view>
      </view>
      <view class="btnGroup">
        <view class="item" data-num="1" bindtap="caculatBtn">1</view>
        <view class="item" data-num="2" bindtap="caculatBtn">2</view>
        <view class="item" data-num="3" bindtap="caculatBtn">3</view>
        <view class="item" data-num="eq" bindtap="caculatBtn">=</view>
      </view>
      <view class="btnGroup">
        <!-- <view class="item" data-num=".">.</view> -->
        <view class="item" data-num="cls" bindtap="caculatBtn">C</view> 
        <view class="item" data-num="0" bindtap="caculatBtn">0</view>
        <view class="item" data-num="del" bindtap="caculatBtn">
          <image class="caculate-back" data-num="del" bindtap="caculatBtn" src="../../public/images/caculate-back.png"></image>
        </view>
        <view class="item" bindtap="caculatok">OK</view>
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import api from "../api/api";

  export default class Statement extends wepy.page {
    data = {
      showCaculation: false,
      indicatorDots: true,
      autoplay: false,
      // 提交方法
      method: 'POST',
      //分类
      categories: [{id: 1, name: '现金'}],
      expendCategories: [],
      incomeCategories: [],
      // 当前选中分类
      curCategoryName: '',
      // 账单数据
      statement: {
        id: 0,
        category_id: 0,
        asset_id: 0,
        amount: 0,
        type: 'expend',
        description: '',
        year: 0,
        month: 0,
        day: 0,
        date: "",
        time: ""
      },
      // 账户
      assets: [],
      multiArray: [[], []],
      multiIndex: [0, 0],
      defaultAsset: 0,

      //计算器相关
      formula: '',
      op: {
        'plus': '+',
        'minus': '-',
        'mul': '*',
        'div': '/'
      },
      opArr: ['+', '-', '*', '/'],
      infix: [],
      suffix: [],
      result: [],
      lastVal: 0,
      calcDone: false
    }

    onLoad () {
      let myDate = new Date();
      if (this.statement.date != '') {
        myDate = new Date(this.statement.date)
      }
      let year = myDate.getFullYear()
      let month = myDate.getMonth() + 1
      let day = myDate.getDate()
      let hour = myDate.getHours()
      let min = myDate.getMinutes()
      if (hour < 10) hour = `0${hour}`
      if (min < 10) min = `0${min}`
      if (month < 10) month = `0${month}`
      if (day < 10) day = `0${day}`

      let time = [hour, min].join(':')
      if (this.statement.time != '') time = this.statement.time
      this.statement.date = [year, month, day].join('-')
      this.statement.time = time
      this.getCategory()
      this.getAssets()
    }

    methods = {
      changeType(e) {
        let item = e.currentTarget.dataset.item
        let categories = []
        if (item == 'expend') {
          categories = this.expendCategories
        } else {
          categories = this.incomeCategories
        }
        this.statement.type = item
        this.categories = categories
      },
      categoryChange (e) {
        let categoroyId = e.currentTarget.dataset.categoryId
        let name = e.currentTarget.dataset.categoryName
        this.statement.category_id = categoroyId
        this.curCategoryName = name
      },
      assetChange(e) {
        let child_idx = e.detail.value[1]
        let parent_id = e.detail.value[0]
        parent_id = this.assets['parent_assets'][parent_id]['id']
        this.statement.asset_id = this.assets['child_assets'][parent_id][child_idx]['id']
      },
      // 日期改变
      dateChange(e) {
        this.statement.date = e.detail.value
      },
      // 时间改变
      TimeChange(e) {
        this.statement.time = e.detail.value
      },
      // 备注更改
      InputChange (e) {
        this.statement.remark = e.detail.value
      },
      // 账户栏的列变更
      bindMultiPickerColumnChange (e) {
        let value = e.detail.value
        if(e.detail.column === 0) {
          let id = this.assets.parent_assets[value]['id']
          this.multiIndex[0] = value
          this.multiIndex[1] = this.assets.child_assets[id]
        } else {
          this.multiIndex[1] = value
        }
        this.$apply()
      },
      caculatBtn(event) {
        var val = event.target.dataset.num;
        var action = val;
        if (!isNaN(parseInt(val, 10))) {
          this.buildInfix(parseInt(val, 10), 'add');
          this.calculate();
          // 操作：清除、删除、计算等于
        } else if (['cls', 'del', 'eq'].indexOf(val) !== -1) {
          if (this.infix.length == 0) {
            this.resetData();
            return;
          }
          // 清空
          if (action === 'cls' || (action === 'del' && this.calcDone)) {
            this.resetData();
          } else if (action === 'del') {
            // 重新构建中缀表达式
            this.buildInfix('', 'del');
            this.calculate();
          }
          // 等于
          else if (action === 'eq') {
            this.calculate('eq');
          }
        } else if (this.isOp(this.op[action])) {
          if (!this.infix.length && (this.op[action] === '*' || this.op[action] === '/')) {
            return;
          }
          this.buildInfix(this.op[action], 'add');
        }

        var formula = this.infix.join('');
        formula = (formula.length == 0) ? formula : formula + '='
        if (action === 'eq') formula = ''
        this.formula = formula 
      }
    }

    async getCategory() {
      const res = await api.getBillCategories()
      const data = res.data
      let categories = this.type == 'income' ? data.income_categories : data.expend_categories
      let cur_category_id = this.categoryId == '0' ? categories[0][0]['id'] : this.categoryId
      let cur_name = categories[0][0]['name']
      if (this.categoryId != '0') {
        for (let i = 0;i < categories.length;++i) {
          for(let j = 0;j < categories[i].length; ++j) {
            if (this.categoryId == categories[i][j]['id']) {
              cur_name = categories[i][j]['name']
            }
          }
        }
      }
      this.categories = categories
      this.expendCategories = data.expend_categories
      this.incomeCategories = data.income_categories
      this.curCategoryName = cur_name
      this.$apply()
      // "params.category_id": cur_category_id
    }

    async getAssets() {
      const res = await api.getBillAssets()
      const data = res.data
      let arr = []
      let childs = data.child_assets[data.parent_assets[0]['id']]
      let cur_asset_id = childs[0]['id']
      arr.push(data.parent_assets)
      arr.push(childs)

      this.statement.asset_id = cur_asset_id
      this.assets = data
      this.multiArray = arr
      this.$apply()
    }

    // 计算器的方法
    resetData () {
      this.infix          = []
      this.suffix         = []
      this.result         = []
      this.lastVal        = 0
      this.curDot         = false
      this.statement.amount      = '0.00'
    }

    isOp (op) {
      return op && this.opArr.indexOf(op) !== -1;
    }

    // 判断运算符优先级
    priorHigher (a, b) {
      return (a === '+' || a === '-') && (b === '*' || b === '/');
    }

    opCalc (b, op, a) {
      return op === '+'
        ? a + b
        : op === '-'
          ? a - b
          : op === '*'
            ? a * b
            : op === '/'
              ? a / b
              : 0;
    }

    // 构建中缀表达式
    buildInfix (val, type) {
      var newVal;
      // 标志着计算已经完成
      if (this.calcDone) {
        this.calcDone = false;
        if (!this.isOp(val)) {
          this.resetData();
        } else {
          var re = this.result[0];
          this.resetData();
          this.infix.push(re);
        }
      }

      if (type === 'del') {
        newVal = this.infix.pop();
        newVal = Math.floor(newVal / 10);
        if (newVal) {
          this.infix.push(newVal);
        }
        if (this.infix.length - 1 >= 0) {
          this.lastVal = this.infix[this.infix.length - 1];
        } else {
          this.lastVal = 0;
        }
      } else if (type === 'add') {
        // 两个连续的运算符
        if (this.isOp(val) && this.isOp(this.lastVal)) {
          newVal = this.infix.pop();
          this.infix.push(val);
          return this.infix;
        } else if (!this.isOp(val) && !this.isOp(this.lastVal)) {
          newVal = this.lastVal * 10 + val;
          this.infix.pop();
          this.lastVal = newVal
          this.infix.push(newVal);
          return this.infix;
        }
        this.lastVal = val;
        this.infix.push(val);
        return this.infix;
      }
    }

    calculate (type) {
      if (this.infix.length % 2 == 0 && this.infix.length != 1) {
        return
      }
      this.infix2Suffix()
      this.calcSuffix()
      if (this.statement.amount) {
        if (type === 'eq') {
          this.calcDone = true
          this.lastVal = this.statement.amount
        }
      }
    }

    calcSuffix () {
      this.result = [];
      for (var i = 0; i < this.suffix.length; i++) {
        if (!this.isOp(this.suffix[i])) {
          this.result.push(this.suffix[i])
        } else {
          this.result.push(this.opCalc(this.result.pop(), this.suffix[i], this.result.pop()))
        }
      }
      this.statement.amount = this.result.length == 0 ? '0.00' : `${this.result[0]}.00`
    }

    // 中缀表达式转后缀
    infix2Suffix () {
      let temp = []
      this.suffix = []
      for (var i = 0; i < this.infix.length; i++) {
        if (!this.isOp(this.infix[i])) {
          this.suffix.push(this.infix[i])
        }
        else {
          if (!temp.length) {
            temp.push(this.infix[i])
          } else {
            var opTop = temp[temp.length - 1]
            // 循环判断运算符优先级，将运算符较高的压入后缀表达式
            if (!this.priorHigher(opTop, this.infix[i])) {
              while (temp.length && !this.priorHigher(opTop, this.infix[i])) {
                this.suffix.push(temp.pop())
                opTop = temp[temp.length - 1]
              }
            }
            // 将当前运算符也压入后缀表达式
            temp.push(this.infix[i])
          }
        }
      }
      // 将剩余运算符号压入
      while (temp.length) {
        this.suffix.push(temp.pop())
      }
    }

    caculatok() {
      this.infix          = []
      this.suffix         = []
      this.result         = []
      this.lastVal        = 0
      this.formula        = ''
      this.curDot         = false
      this.showCaculation = false
    }

    showCaculation() {
      this.showCaculation = true
    }

    hideCaculation() {
      this.showCaculation = false
    }

  }
</script>
<style>
swiper {
  height:290rpx;
}
.header {
  background: #fb4b4d;
  border-bottom: #fb4b4d;
  text-align: center;
  color: #fff;
  font-size: 16px;
  padding: 4px 0;
}

.header .save {
  float: right;
  padding: 0;
  padding-right: 2px;
  position: absolute;
  right: 10px;
}

.header text {
  padding: 4px 16px;
}

.header text.active {
  border-bottom: 2px solid #fff;
}

.item-category text {
  font-size: 12px;
}

.mark-header {
  padding: 0px 15px;
  height: 50px;
  overflow: hidden;
}
.mark-header.expend, .header.expend{
  background: linear-gradient(to right,rgba(9,187,7, 1), rgba(9,187,7, 0.7));
}
.mark-header.income, .header.income{
  background: linear-gradient(to right,rgba(251,75,77, 1), rgba(251,75,77, 0.7));
}
.mark-header .icon-name {
  display: inline-block;
  vertical-align: middle;
  font-size: 14px;
  color: #fff;
  font-weight: bold;
  line-height: 50px;
}

.mark-header .amount {
  font-size: 14px;
  color: #fff;
  display: block;
  font-weight: bold;
  float: right;
  height: 100%;
}

.mark-header .amount > view:first-child {
  height: 67%;
  text-align: right;
  line-height: 45px;
  font-size: 18px;
}

.mark-header .amount > view:last-child {
  height: 50%;
  text-align: right;
  font-size: 10px;
}

.item-category {
  padding: 0 16px 8px 16px;
  border-bottom: 1px solid #ccc;
}

.item-category:last-child {
  padding-top: 8px;
}

.item-category > text {
  font-size: 12px;
}

.item-category > view {
  font-size: 14px;
}

.item-category .remark {
  min-height: 2em;
  height: 2em;
  font-size: 16px;
  padding-top: 8px;
}

/* caculation */

.caculation {
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100%;
  z-index: 666;
}

.caculation .close {
  width: 35px;
  position: absolute;
  right: 0;
  top: -26px;
  text-align: center;
  background: #efefef;
  border: 1px solid #ccc;
  height: 25px;
}

.caculation .close image {
  width: 20px;
  height: 25px;
  display: inline-block;
}

.caculation .btnGroup {
  display: flex;
  flex-direction: row;
  border-top: 1px solid #323546;
}

.caculation .btnGroup > .item {
  text-align: center;
  width: 25%;
  padding: 14px 0;
  background: #3e4052;
  border-left: 1px solid #323546;
  color: white;
}

.caculate-back {
  width: 25px;
  height: 25px;
  margin-top: 5px;
}

.caculation .btnGroup > .item:first-child {
  border-left: none;
}

/* Picker */

.picker-view {
  position: fixed;
  left: 0;
  bottom: 0;
  width: 100%;
  height: 300px;
  z-index: 999;
}
.picker {
  font-size:14px;
}
.save-btn {
  position: absolute;
  bottom:70rpx;
  width: 100%;
  text-align: center;
}

.save-btn > .bill-btn {
  margin: 0 4%;
}

.save {
  background: #fb4b4d;
  color: white !important;
}

.bill-btn {
  border: 1px solid #fb4b4d;
  display: inline-block;
  padding: 4px 0;
  width: 40%;
  color: #fb4b4d;
  text-align: center;
  font-size: 18px;
}

.category-flex {
  overflow:hidden;
}  
.category-flex image {
  width: 30px;
  height: 30px;
}
.category-flex > view {
  width: 20%;
  float: left;
  text-align:center;
  margin-top: 8px;
}
.category-flex .image {
  height: 30px;
}
.category-flex .name {
  color: #999;
  font-size: 24rpx;
  margin-top: 2px;
}
.item-category > text {
  color: #999;
}
.cur-asset {
  font-size: 14px;
}
</style>