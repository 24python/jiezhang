<template>
  <view class="container">
    <view class="header">
      <image class="bg" src="{{ bgImage }}"></image>
      <view class="level-2">
        <view class="fs14">
          <text>今日支出</text>
          <text class="pay-num"> {{ header.pay_num }} </text>
          <text>笔，共</text>
        </view>
        <view class="fs21 today-expend">{{ header.today_pay }}</view>
        <view class="overflow-hide">
          <view class="pull-left fs14">本月支出 {{ header.month_pay }}</view>
          <navigator url="/pages/budgets/budget"><view class="pull-right fs14">预算剩余 {{ header.budget }}</view></navigator>
        </view>
      </view>
    </view>
    
    <view class="zan-btns">
      <navigator url="/pages/statements/statement">
        <button class="zan-btn jz-btn btn-shadow">记一笔</button>
      </navigator>
    </view>

    <view class="scope {{ tabFixed }}">
      <view class="today {{ tabActive == 'today' ? 'active' : '' }}" @tap="choseTab('today')">今天</view>
      <view class="week {{ tabActive == 'week' ? 'active' : '' }}" @tap="choseTab('week')">本周</view>
      <view class="month {{ tabActive == 'month' ? 'active' : '' }}" @tap="choseTab('month')">本月</view>
      <view class="year {{ tabActive == 'year' ? 'active' : '' }}" @tap="choseTab('year')">本年</view>
    </view>

    <view class="statement-list">
      <view class="surplus" hidden="{{ scope == 'today' }}">
        <text class="income">收入 {{ tabHeader.income }}</text>
        <text class="expend">支出 {{ tabHeader.expend }}</text>
        <text>结余 {{ tabHeader.surplus }}</text>
      </view>

      <view wx:if="{{ scope == 'year' || scope == 'month' }}">
        <index-year-month :list.sync="list"></index-year-month>
      </view>

      <view wx:else>
        <repeat for="{{ list }}" key="index" index="index" item="item">
          <index-statement :statement.sync="item"></index-statement>
        </repeat>
      </view>

      <view class="zan-loadmore" hidden="{{ !showLoading }}">
        <view class="zan-loading"></view>
        <view class="zan-loadmore__tips">加载中...</view>
      </view>
    </view>

    <view class="zan-loadmore zan-loadmore--nodata" hidden="{{ !noMoreData }}">
      <view class="zan-loadmore__tips">没有更多了</view>
    </view>
    

    <view wx:if="{{ list.length == 0 && !showLoading }}">
      <empty :title.sync="emptyTitle"></empty>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import api from "../utils/api"
  import Empty from '../components/empty'
  import IndexStatement from '../components/index/statement'
  import IndexYearMonth from '../components/index/year_month'
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '首页',
      enablePullDownRefresh: true
    }

    data = {
      tabActive: 'today',
      scope: 'today',
      emptyTitle: '今天还没有记账呢~',
      tabHeader: {
        surplus: 0,
        income: 0,
        expend: 0
      },
      list: [],
      curPage: 1,
      per_page: 20,
      tabFixed: '',
      header: {
        today_pay: '0.00',
        budget: '未设置预算',
        pay_num: 0,
        bg_avatar: null
      },
      statementMonth: [],
      noMoreData: false,
      stopRequest: false,
      preventRepeatReuqest: false,
      showLoading: false
    }

    components = {
      empty: Empty,
      'index-statement': IndexStatement,
      'index-year-month': IndexYearMonth
		}

    methods = {
      async setAvatar () {
        const choseImages = await wepy.chooseImage({
          count: 1,
          sizeType: ['compressed'],
          sourceType: ['album']
        })
        const uploadResult = await api.Upload(
          {
            file_path: choseImages.tempFilePaths[0],
            query: {
              type: 'bg_avatar'
            }
          })
        this.getHeader()
      },
      async choseTab (item) {
        this.tabActive = item
        this.curPage = 1
        if (item == 'today') {
          this.emptyTitle = '你今天还没记账呢~'
        } else {
          this.emptyTitle = '没找到记账数据呢~'
        }
        
        if (this.scope != item) {
          this.scope = item
          this.noMoreData = false
          this.statementMonth = []
          let cacheList = wx.getStorageSync(`list-${item}`) || null
          let cacheHeader = wx.getStorageSync(`header-${item}`) || null
          if (cacheList !== null || cacheHeader !== null) {
            this.list = cacheList
            this.tabHeader = cacheHeader
          } else {
            this.list = []
            await this.getList()
          }
        }
      },
      // 吸顶
      onPageScroll: function (event) {
        let scrollTop = event.scrollTop
        if (scrollTop >= 250) {
          this.tabFixed = 'tab-fix'
        } else {
          this.tabFixed = ''
        }
      }
    }
    
    onHide () {
      this.deleteCache()
    }

    onPullDownRefresh () {
      wx.stopPullDownRefresh()
      this.getHeader()
      this.curPage = 1
      this.list = []
      this.stopRequest = false
      this.getList()
    }

    async onLoad () {
      await this.getList()
    }

    async onShow () {
      await this.getHeader()
    }

    // 此函数用于 statement.wpy 里更新后调用
    updateStatement (id, type) {
      // 此处应使用二分查找
      if (type == 'put' || type == 'delete') {
        let index = 0
        for(let item of this.list) {
          if (item.id == id) {
            if(type == 'delete') {
              this.list.splice(index, 1)
            } else {
              this.getStatementById(item, id)
            }
            break
          }
          index += 1
        }
      } else {
        this.addStatementById(id)
      }
    }

    async onReachBottom () {
      this.curPage ++
      await this.getList({from: 'reachBottom'})
    }

    async getHeader () {
      const res = await api.getIndexHeader()
      this.header = res.data
      this.$apply()
    }

    async getList(options = {}) {
      this.showLoading = true
      const res = await api.getIndexList({
        query: {
          scope: this.scope,
          page: this.curPage,
          per_page: this.per_page
        }
      })
      const data = res.data.list
      this.tabHeader = res.data.header
      if(res.data.status != 405) {
        if (this.scope == 'year' || this.scope == 'month') {
          this.dealWithYear(data)
        } else {
          this.list = Array.from(new Set([...this.list, ...data]))
        }
        this.noMoreData = false
      }

      if (options.from == 'reachBottom' && ((data != undefined && data.length == 0) || res.data.status == 405)) {
        this.noMoreData = true
      }
      
      this.showLoading = false
      this.$apply()
    }

    async getStatementById(obj, id) {
      const res = await api.getIndexBill(id)
      Object.assign(obj, res.data)
      this.$apply()
    }

    async addStatementById(id) {
      const res = await api.getIndexBill(id)
      this.list = [res.data].concat(this.list)
      this.$apply()
    }

    // 分组分页。周/月/年 Tab选项。需改进
    // 追加后端返回的信息到对应的分组
    dealWithYear (data) {
      let set1 = new Set(this.statementMonth)
      for(let i = 0, length = data.length; i < length; ++i) {
        if (set1.has(data[i].header.index)) {
          data[i].header = null
        }
      }
      this.list = Array.from(new Set([...this.list, ...data]))
      for(let item of data) {
        if (item.header !== null) this.statementMonth.push(item.header.index)
      }
    }

    deleteCache () {
      for(let item of ['today', 'week', 'month', 'year']) {
        wx.removeStorageSync(`header-${item}`)
        wx.removeStorageSync(`list-${item}`)
      }
    }

    computed = {
      showEmpty () {
        return this.list.length <= 0
      },
      todayMonthDay () {
        const NowDate = new Date()
        let month = NowDate.getMonth() + 1
        let day = NowDate.getDate()
        if (month < 10) month = "0" + month
        if (day < 10) day = "0" + day
        return  month + "-" + day
      },
      bgImage () {
        let avatar = this.header.bg_avatar
        if (avatar == null) {
          avatar = "../public/images/default-2.jpeg"
        }
        return avatar
      }
    }
  }
</script>
<style lang="scss" src="../public/styles/index.scss"></style>
