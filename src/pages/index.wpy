<template>
  <view class="container">
    <view class="header">
      <image class="bg" src="{{ bgImage }}"></image>
      <view class="level-2">
        <view class="fs14">
          <text>今日支出</text>
          <text> {{ header.pay_num }} </text>
          <text>笔，共</text>
        </view>
        <view class="fs21 today-expend">{{ header.today_pay }}</view>
        <view class="overflow-hide">
          <view class="pull-left fs14">本月支出 {{ header.month_pay }}</view>
          <navigator url="/pages/budgets/budget"><view class="pull-right fs14">预算剩余 {{ header.budget }}</view></navigator>
        </view>
      </view>
      <navigator url="/pages/message/message"><view class="iconfont jz-icon-xiaoxi {{ header.has_no_read ? 'no-read-msg' : '' }}"></view></navigator>
    </view>
    
    <view class="zan-btns new-record">
      <navigator url="/pages/statements/statement">
        <button class="zan-btn jz-btn btn-shadow">记一笔</button>
      </navigator>
    </view>

    <view class="scope">
      <view class="the-week {{ current == 0 ? 'active' : '' }}" @tap="switchScope(0)">近一周消费</view>
      <view class="preorder {{ current == 1 ? 'active' : '' }}" @tap="switchScope(1)">预购清单</view>
    </view>
    
    <swiper current="{{ current }}" style="flex: 1;margin-top: 24rpx;" bindchange="swiperChange">
      <swiper-item>
        <view class="statement-list">
          <repeat for="{{ list }}" key="index" index="index" item="item">
            <StatementItem :statement.sync="item"></StatementItem>
          </repeat>

          <view class="zan-loadmore" hidden="{{ !showLoading }}">
            <view class="zan-loading"></view>
            <view class="zan-loadmore__tips">加载中...</view>
          </view>
        </view>

        <view class="zan-loadmore zan-loadmore--nodata" hidden="{{ !noMoreData }}">
          <view class="zan-loadmore__tips">没有更多了</view>
        </view>

        <view wx:if="{{ list.length == 0 && !showLoading }}">
          <empty :title.sync="emptyTitle"></empty>
        </view>
      </swiper-item>

      <swiper-item>
        <repeat for="{{ prepareOrders }}" key="index" index="index" item="item">
          <orderItem :good="item" @getGood.user="getGood"></orderItem>
        </repeat>

        <view wx:if="{{ prepareOrders.length == 0 }}">
          <orderEmpty :title.sync="orderEmptyTitle"></orderEmpty>
          <view class="add-preorder" @tap="showCreateModal()">+ 新增预购商品</view>
        </view>
      </swiper-item>
    </swiper>

    <preorderForm 
      :showModal.sync="showModal" 
      :good.sync="preOrder" 
      @submit.user="createPrepareOrder"
      @del.user="delPrepareOrder"
      @markbuy.user="markBuy">
    </preorderForm>
    
  </view>
</template>

<script>
  import wepy from 'wepy'
  import wxRequest from '@/utils/wxRequest'
  import Session from '@/utils/session'
  import Empty from '@/components/empty'
  import StatementItem from '@/components/index/statement'
  import orderItem from '@/components/prepare_order_item'
  import preorderForm from '@/components/prepare_buy_item'
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '首页'
      // enablePullDownRefresh: true // 与 swiper 下滑冲突
    }

    data = {
      emptyTitle: '本周还没有开始记账哦~',
      orderEmptyTitle: '无预购清单，点击下方添加一笔吧',
      list: [],
      header: {
        today_pay: '0.00',
        budget: '未设置预算',
        pay_num: 0,
        bg_avatar: null
      },
      swiperHeight: 400,
      current: 0,
      noMoreData: false,
      showLoading: false,
      prepareOrders: [],
      showModal: false,
      preOrder: {}
    }

    components = {
      empty: Empty,
      orderEmpty: Empty,
      StatementItem,
      orderItem,
      preorderForm
		}

    onPullDownRefresh () {
      wx.stopPullDownRefresh()
      this.getHeader()
      this.getList()
    }

    onLoad () {
      this.updateStatement()
      this.getPreOrders()
      wx.getSystemInfo({
        success: (res) => {
          this.swiperHeight = res.windowHeight - 315
          this.$apply()
        }
      })
    }

    methods = {
      createPrepareOrder (e) {
        let value = e.detail.value
        if(typeof value.id == undefined || value.id == '') {
          this.createGood(value)
        } else {
          this.updateGood(value.id, value)
        }
      },
      async markBuy (id) {
        await wxRequest.Put(`pre_order/${id}/mark`)
        this.getPreOrders()
      },
      async delPrepareOrder (id) {
        await wxRequest.Destroy(`pre_order/${id}`)
        this.getPreOrders()
      },
      async getGood (id) {
        this.preOrder = await wxRequest.Get(`pre_order/${id}`)
        this.showModal = true
        this.$apply()
      },
      showCreateModal() {
        this.preOrder = {}
        this.showModal = true
      },
      swiperChange (e) {
        this.current = e.detail.current
      },
      switchScope (current) {
        this.current = current
      }
    }

    // 此方法用于 statement.wpy 表单提交后触发的更新调用
    // FIXME: 应全局维护同一个 statements 数据域
    async updateStatement () {
      await this.getHeader()
      await this.getList()
    }

    async getHeader () {
      const data = await wxRequest.Get('header')
      this.header = data
      this.$apply()
    }

    async getList(options = {}) {
      this.showLoading = true
      const res = await wxRequest.Get('index')
      if (res.status == 405 || res.status == 301) {
        this.noMoreData = true
      } else {
        this.list = res
        this.noMoreData = false
      }
      this.showLoading = false
      this.$apply()
    }

    async getPreOrders() {
      const data = await wxRequest.Get('pre_order')
      this.prepareOrders = data
      this.$apply()
    }

    async createGood (params) {
      const result = await wxRequest.Post('pre_order', params)
      if(result.status != 200) {
        tip.error(result.msg)
      } else {
        this.showModal = false
        this.getPreOrders()
      }
    }

    async updateGood (id, params) {
      const result = await wxRequest.Put(`pre_order/${id}`, params)
      if(result.status != 200) {
        tip.error(result.msg)
      } else {
        this.showModal = false
        this.getPreOrders()
      }
    }

    computed = {
      showEmpty () {
        return this.list.length <= 0
      },
      bgImage () {
        let avatar = this.header.bg_avatar
        let bg_images_key = Session.key.bgImageKey
        let cacheImage = Session.get(bg_images_key)
        if(cacheImage) return cacheImage
        
        if (avatar == null || avatar == '') {
          avatar = "../public/images/covers/default-8.jpeg"
        } else {
          Session.set(bg_images_key, avatar)
        }
        
        return avatar
      }
    }
  }
</script>
<style lang="scss" src="@/public/styles/index.scss"></style>
