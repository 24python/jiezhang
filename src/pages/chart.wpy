<template>
<view class="container">
  <view class="flex box box-tb box-align-center header">
    <view class="calendar box box-tb">

    <picker mode="date" value="{{curYearMonth}}" bindchange="bindDateChange">
      <view class="cur-month fs18"> {{ curYearMonth }} </view>
    </picker>

      <view class="weeks box box-lr box-pack-center box-align-center">
        <view class="flex week fs12" wx:for="{{weeks_ch}}" wx:key="{{index}}" data-idx="{{index}}">{{item}}</view>
      </view>
      <view class="days box box-lr box-wrap">
        <view wx:if="{{hasEmptyGrid}}" class="grid white-color box box-align-center box-pack-center" wx:for="{{empytGrids}}" wx:key="{{index}}" data-idx="{{index}}">
        </view>
        <view class="grid white-color box box-align-center box-pack-center" wx:for="{{days}}" wx:key="{{index}}" data-idx="{{index}}" bindtap="tapDayItem">
          <view class="day {{item.choosed ? 'border-radius selected-bg' : ''}} {{ cur_today == item.day ? 'border-radius today' : '' }} box box-align-center box-pack-center">{{item.day}}</view>
        </view>
      </view>
    </view>
  </view>
 
  <view class="assets">
    <view class="section">
      <view class="col999"> {{ monthAndDay }} </view>
      <view class="select-tab" wx:if="{{ singleData.length > 0 }}">
        <view class="{{ tabActive == 'single' ? 'active' : '' }}" data-item="single" bindtap="changeTab">条目</view>
        <view class="{{ tabActive == 'category' ? 'active' : '' }}" data-item="category" bindtap="changeTab">分类</view>
      </view>
    </view>
		
    <view class="asset single" hidden="{{tabActive == 'category'}}">
			
      <empty title="这天还没有记账呢~" hidden="{{ singleData.length > 0 }}"></empty>

      <view class="day-bills" hidden="{{ singleData.length == 0 }}" wx:for="{{ singleData }}">
        <view class="fs12 col999 yearAndMonth">{{ item.year }}</view>
        <view class="secondary-title">
          <view class="dayAndWeek">
            <view>{{ item.day }}</view>
            <view class='fs12 col999' style='padding: 0 2px'>/</view>
            <view class="fs12 col999">{{ item.detail_day }}</view>
          </view>
          <view class="pull-right balance col999">结余： {{ item.balance }}</view>
        </view>

        <view class="bill-detail" wx:for="{{ item.list }}" bindtap="showStatement('{{ item.id }}')">
          <view class="icon pull-left"><image src="{{ item.category_icon }}"></image></view>
          <view class="information">
            <view class="title overflow-hide">
              <view class="pull-left">{{ item.category }}</view>
              <view class="pull-right {{ item.type }}">{{ item.money }}</view>
            </view>
            <view class="col999 fs14" wx:if="{{ item.remark != '' }}">{{ item.remark }}</view>
            <view class="col999 fs12">{{ item.time }} · {{ item.wallet }}</view>
          </view>
        </view>
      </view>
    </view> 

    <!-- 分类 -->
    <view class="asset category" wx:for="{{ mutipleData }}" data-idx="{{index}}" wx:for-item="mutiple" bindtap="showHidden" hidden="{{tabActive == 'single'}}">
      <view class="detail">
        <view class="title">
          <view class="pull-left">{{ mutiple.category_name }}</view>
          <view class="pull-right {{ mutiple.type }}">{{ mutiple.total }}</view>
        </view>

        <view class="single" wx:for="{{ mutiple.list }}" bindtap="showStatement('{{ item.id }}')" hidden="{{ mutiple.hidden }}">
          <view class="pull-left col999 date-time">
            <view class="fs14">{{ item.day }}</view>
            <view class="fs10">{{ item.year }}</view>
          </view>
          <view class="{{ item.type }} pull-right">{{ item.money }}</view>
          <view class="information">
            <view class="pull-left icon"><image src="{{ item.category_icon }}"></image></view>
            <view class="pull-left">
              <view>{{ item.category_name }}</view>
              <view class="fs12 col999">{{ item.description }}</view>
            </view>
          </view>
          
        </view>
      </view>
    </view>
  </view>
</view>
</template>

<script>
	import wepy from 'wepy'
  import api from "../api/api";
  import tip from '../utils/tip'
	import Empty from '../components/empty';
	const NowDate = new Date()
  export default class Chart extends wepy.page {
		data = {
			hasEmptyGrid: false,
			today: NowDate.getDate(),
			cur_year: NowDate.getFullYear(),
			cur_month: NowDate.getMonth() + 1,
			cur_today: NowDate.getDate(),
			tabActive: 'single',
			prevSelectedIndex: -1,
			picker_value: [],
			picker_year: [],
			picker_month: [],
			days: [],
			mutipleData: [],
			singleData: [],
			empytGrids: [],
			curYearMonth: this.getNowFormatDate('.'),
			weeks_ch: ['日', '一', '二', '三', '四', '五', '六']
		}
		components = {
			empty: Empty
		};
		methods = {
			handleCalendar(e) {
				const handle = e.currentTarget.dataset.handle;
				const cur_year = this.cur_year;
				const cur_month = this.cur_month;
				if (handle === 'prev') {
					let newMonth = cur_month - 1;
					let newYear = cur_year;
					if (newMonth < 1) {
						newYear = cur_year - 1;
						newMonth = 12;
					}
					this.calculateDays(newYear, newMonth);
					this.calculateEmptyGrids(newYear, newMonth);
				} else {
					let newMonth = cur_month + 1;
					let newYear = cur_year;
					if (newMonth > 12) {
						newYear = cur_year + 1;
						newMonth = 1;
					}

					this.calculateDays(newYear, newMonth);
					this.calculateEmptyGrids(newYear, newMonth);
				}
				this.cur_year = newYear
				this.cur_month = newMonth
			},
			tapDayItem(e) {
				let idx = e.currentTarget.dataset.idx;
				let days = this.days;
				if (this.prevSelectedIndex == idx)
					return;
				if (this.prevSelectedIndex != -1)
					days[this.prevSelectedIndex].choosed = false
				days[idx].choosed = !days[idx].choosed;
				this.prevSelectedIndex = idx
				this.days = days
				this.cur_today = days[idx].day
				this.getChart()
			},
			showStatement (id) {
				wepy.navigateTo({
          url: `/pages/statement?id=${id}`
        })
			},
			bindDateChange(e) {
				let choseDateArr = e.detail.value.split('-');
				let choose_year = choseDateArr[0] * 1;
				let choose_month = choseDateArr[1] * 1;
				this.cur_year = choose_year;
				this.cur_month = choose_month;
				this.curYearMonth = e.detail.value.replace(/-/g, '.');
				this.calculateEmptyGrids(choose_year, choose_month)
				this.calculateDays(choose_year, choose_month)
				this.getChart()
			},
			changeTab(e) {
				this.tabActive = e.currentTarget.dataset.item
			},
			showHidden(e) {
				let idx = e.currentTarget.dataset.idx
				let value = !this.mutipleData[idx].hidden
				this.mutipleData[idx]['hidden'] = value
			}
		}

		onLoad () {
			let cur_year = NowDate.getFullYear()
			let cur_month = NowDate.getMonth() + 1
			this.calculateEmptyGrids(cur_year, cur_month)
			this.calculateDays(cur_year, cur_month)
			this.getChart()
		}

		onShow () {
			this.getChart()
		}

		async getChart() {
			const res = await api.Chart({
				query: {
					date: `${this.cur_year}-${this.cur_month}-${this.cur_today}`
				}
			});
			this.singleData = res.data.single,
			this.mutipleData = res.data.mutiple
			this.$apply()
		}

		getNowFormatDate(spilt) {
			var date = new Date();
			var year = date.getFullYear();
			var month = date.getMonth() + 1;
			var strDate = date.getDate();
			if (month >= 1 && month <= 9) {
				month = "0" + month;
			}
			if (strDate >= 0 && strDate <= 9) {
				strDate = "0" + strDate;
			}
			return year + spilt + month + spilt + strDate;
		}

		calculateEmptyGrids(year, month) {
			const firstDayOfWeek = this.getFirstDayOfWeek(year, month);
			let empytGrids = [];
			if (firstDayOfWeek > 0) {
				for (let i = 0; i < firstDayOfWeek; i++) {
					empytGrids.push(i);
				}
				this.hasEmptyGrid = true
				this.empytGrids = empytGrids
			} else {
				this.hasEmptyGrid = false
				this.empytGrids = []
			}
		}

		calculateDays(year, month) {
			let days = [];
			const thisMonthDays = this.getThisMonthDays(year, month);
			for (let i = 1; i <= thisMonthDays; i++) {
				days.push({
					day: i,
					choosed: false
				});
			}
			this.days = days
		}

		getThisMonthDays(year, month) {
			return new Date(year, month, 0).getDate();
		}
		
		getFirstDayOfWeek(year, month) {
			return new Date(Date.UTC(year, month - 1, 1)).getDay();
		}

		computed = {
			monthAndDay() {
				let month = this.cur_month
				let today = this.cur_today
				if (month < 10) {
					month = `0${month}`
				}
				if (today < 10) {
					today = `0${today}`
				}
				return `${month}-${today}`
			}
		}
  }
</script>
<style lang="less">
.container {
  background: #f2f2f2;
}

.header {
  background: white;
  margin-bottom: 8px;
  box-shadow: 0 0 5px #ccc;
  padding-bottom: 6px;
}

.income-expend {
  position: absolute;
  bottom: 0;
  right: 0;
  font-size: 10px;
}

.income-expend > text {
  display: block;
}

.chose-tab {
  font-size: 16px !important;
  box-shadow: 0px 1px 0px #f3f3f3 !important;
}

.assets {
  padding: 6px 0px;
  font-size: 14px;
  background: white;
}

.assets .asset.single {
  padding: 0 12px;
}

.assets .category-icon {
  margin-right: 6px;
}

.section {
  padding: 8px 12px;
  border-bottom: 1px solid #efefef;
  position: relative;
}

.select-tab {
  position: absolute;
  top: 2px;
  right: 8px;
  border: 1px solid #999;
  border-radius: 4px;
}

.select-tab > view:first-child {
  border-right: 1px solid #999;
}

.select-tab > view {
  float: left;
  color: #999;
  padding: 2px 6px;
}

.select-tab > .active {
  background: #999;
  color: white;
}

.col999 {
  color: #999;
}

/*  条目样式  */

.secondary-title {
  margin-top: -6px;
}

.dayAndWeek {
  display: inline-block;
}

.dayAndWeek > view {
  display: inline-block;
}

.dayAndWeek > view:first-child {
  font-size: 16px;
  font-weight: bold;
}

.secondary-title .balance {
  font-size: 12px;
  padding-top: 4px;
}

.day-bills {
  border-bottom: 1px solid #f4f4f4;
}

.day-bills > view:last-child .information {
  border: none;
}

.day-bills .yearAndMonth {
  margin-top: 2px;
}

.bill-detail {
  margin-top: 2px;
  margin-bottom: 12px;
}

.bill-detail .icon, .bill-detail image {
  width: 40px;
  height: 40px;
  /* border-radius: 50%; */
  margin-top: 2px;
}

.bill-detail .information {
  margin-left: 50px;
  border-bottom: 1px solid #f4f4f4;
  padding-bottom: 6px;
}

.bill-detail .information .title {
  font-size: 18px;
}

/* 分类样式  */

.category .detail .title {
  overflow-y: hidden;
  background: rgba(248, 248, 248, 0.5);
  padding: 12px;
  border-bottom: 1px solid #efefef;
}

.category .single {
  padding: 8px 12px;
  overflow: hidden;
  border-bottom: 1px solid #efefef;
}

.category .single .date-time {
  width: 42px;
  text-align: center;
}

.category .single .information {
  overflow: hidden;
  margin-left: 42px;
}

.category .single .information image {
  width: 40px;
  height: 40px;
  border-radius: 50%;
}

.category .single .information .icon {
  width: 40px;
  height: 40px;
  margin: 0 8px;
}

/* ****************  日历样式 ************* */

.box {
  display: flex;
}

.box-lr {
  flex-direction: row;
}

.box-rl {
  flex-direction: row-reverse;
}

.box-tb {
  flex-direction: column;
}

.selected-bg {
  background: #ccc;
}

.box-pack-center {
  justify-content: center;
}

.box-align-center {
  align-items: center;
}

.box-wrap {
  flex-wrap: wrap;
}

.flex {
  flex-grow: 1;
}

.cur-month {
  padding: 8px 12px;
}

.weeks {
  color: #999;
  border-bottom: 1px solid #f3f3f3;
  padding: 4px 0;
}

.week {
  text-align: center;
}

.days {
  height: 350rpx;
}

.grid {
  width: 107.1428571429rpx;
}

.day {
  width: 60rpx;
  height: 60rpx;
  color: black;
  font-size: 32rpx;
  font-weight: 400;
}

.border-radius {
  border-radius: 50%;
  position: relative;
  left: 0;
  top: 0;
  color: #fff;
}

.today {
  background: #46c4f4;
  box-shadow: 0 0 5px #ccc;
}

</style>
