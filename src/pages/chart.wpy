<template>
<view class="container">
  <view class="flex box box-tb box-align-center header" id="calendar">
    <view class="calendar box box-tb">

      <view class="calendar-header">
        <view class="selectDate">
          <picker class="cur-month" mode="date" value="{{curYearMonth}}" bindchange="bindDateChange">
            {{ curYearMonth }}
          </picker>
          <image src="../public/images/down-white.png"></image>
        </view>
        <!-- <view class="pull-right select-type">
          <image src="../public/images/filter.png"></image>
          <picker bindchange="bindFilterChange" value="{{filterIndex}}" range="{{filterArray}}">
              范围选择
          </picker>
        </view> -->
      </view>

      <view class="weeks box box-lr box-pack-center box-align-center">
        <view class="flex week fs12" wx:for="{{weeks_ch}}" wx:key="{{index}}" data-idx="{{index}}">{{item}}</view>
      </view>
      <view class="days box box-lr box-wrap">
        <view wx:if="{{hasEmptyGrid}}" class="grid white-color box box-align-center box-pack-center" wx:for="{{empytGrids}}" wx:key="{{index}}" data-idx="{{index}}">
        </view>
        <view class="grid white-color box box-align-center box-pack-center" wx:for="{{days}}" wx:key="{{index}}" data-idx="{{index}}" bindtap="tapDayItem">
          <view class="day {{item.start ? 'border-radius start-bg' : ''}} {{item.end ? 'border-radius end-bg' : ''}} {{item.choosed ? 'border-radius selected-bg' : ''}} {{ today == item.day ? 'border-radius today' : '' }} box box-align-center box-pack-center">{{item.day}}</view>
        </view>
      </view>
    </view>
  </view>
	
	<view class="ljt-tab fs16">
		<view class="time">{{ monthAndDay }}</view>
		<view class="{{ tabActive == 'single' ? 'active' : '' }}" @tap="changeTab('single')">单笔明细</view>
		<view class="{{ tabActive == 'category' ? 'active' : '' }}" @tap="changeTab('category')">分类明细</view>
	</view>

  <view class="assets">
    <view hidden="{{ tabActive == 'category' || singleList.length == 0 }}">
			<!-- 单条 -->
			<view class="left-amount">
				<text class="income income-border">收入: {{ singleData.surplus.income }}</text>
				<text class="expend expend-border">支出: {{ singleData.surplus.expend }}</text>
				<text class="surplus surplus-border">结余: {{ singleData.surplus.surplus }}</text>
			</view>

			<view class="tiaomu" wx:for="{{singleData.list }}" @tap="showStatement('{{ item.id }}')">
				<view class="pull-left col999 date-time">
					<view class="fs14">{{ item.day }}</view>
					<view class="fs12">{{ item.detail_day }}</view>
				</view>
				<view class="pull-right fs16 money {{ item.type }}">{{ item.amount }}</view>
				<view class="information">
					<view class="pull-left icon"><image src="{{ item.category_icon }}"></image></view>
					<view class="pull-left title">
						<view class="fs14">{{ item.category }}</view>
						<view class="fs12 description" wx:if="{{ item.description != null }}">{{ item.description }}</view>
						<view class="col999 fs12">{{ item.time }} · {{ item.wallet }}</view>
					</view>
				</view>
			</view>
    </view>

		<view class="mutiple" hidden="{{ tabActive == 'single' || mutipleData.length == 0 }}">
			<repeat for="{{ mutipleData }}" key="index" index="index" item="item">
				<view class="header fs16" @tap="showHidden('{{index}}')">
					<view class="pull-left">{{ item.category_name }}</view>
					<view class="pull-right {{ item.type }}">{{ item.total }}</view>
				</view>
				<view class="list" hidden="{{ item.hidden }}">
					<singleColumn :obj.sync="item"></singleColumn>
				</view>
			</repeat>	
		</view>

		<empty title="这天还没有记账呢~" hidden="{{ singleList.length > 0 }}"></empty>
  </view>
</view>
</template>

<script>
	import wepy from 'wepy'
  import api from "../utils/api"
  import tip from '../utils/tip'
	import Empty from '../components/empty'
	import singleColumn from '../components/chart_column'
	const NowDate = new Date()
  export default class Chart extends wepy.page {
    config = {
      navigationBarTitleText: '收支统计'
    }

		data = {
			hasEmptyGrid: false,
			today: NowDate.getDate(),
			cur_year: NowDate.getFullYear(),
			cur_month: NowDate.getMonth() + 1,
			cur_today: NowDate.getDate(),
			tabActive: 'single',
			prevSelectedIndex: -1,
			picker_value: [],
			picker_year: [],
			picker_month: [],
			days: [],
			mutipleData: [],
			singleData: [],
			singleList: [],
			empytGrids: [],
			curYearMonth: this.getNowFormatDate('.'),
			weeks_ch: ['日', '一', '二', '三', '四', '五', '六'],
      // 选择起始与结束日期参数
      startDate: null,
      endDate: null,
      dateParams: [],
      filterIndex: 1,
      filterArray: ['按天选择', '按范围选择']
    };

		components = {
			empty: Empty,
			singleColumn: singleColumn
    };
    
		methods = {
			handleCalendar(e) {
				const handle = e.currentTarget.dataset.handle;
				const cur_year = this.cur_year;
				const cur_month = this.cur_month;
				if (handle === 'prev') {
					let newMonth = cur_month - 1;
					let newYear = cur_year;
					if (newMonth < 1) {
						newYear = cur_year - 1;
						newMonth = 12;
					}
					this.calculateDays(newYear, newMonth);
					this.calculateEmptyGrids(newYear, newMonth);
				} else {
					let newMonth = cur_month + 1;
					let newYear = cur_year;
					if (newMonth > 12) {
						newYear = cur_year + 1;
						newMonth = 1;
					}

					this.calculateDays(newYear, newMonth);
					this.calculateEmptyGrids(newYear, newMonth);
				}
				this.cur_year = newYear
				this.cur_month = newMonth
			},
			tapDayItem(e) {
				let idx = e.currentTarget.dataset.idx
				let days = this.days

				let endDate = null
				if (days[idx].start) {
					endDate = new Date(Date.parse(this.startDate))
				} else {
					endDate = new Date(Date.parse(this.endDate))
				}
				
				if (endDate != null && this.cur_year == endDate.getFullYear() && this.cur_month == endDate.getMonth()+1 && days[idx].day == endDate.getDate()) {
					this.startDate = `${this.cur_year}-${this.cur_month}-${days[idx].day}`
					this.dateParams = [this.startDate, this.startDate]
					this.refreshCalendarTab()
				}
				
				if (this.prevSelectedIndex != -1) {
          days[this.prevSelectedIndex].choosed = false
				}

				days[idx].choosed = !days[idx].choosed
				this.prevSelectedIndex = idx
				this.days = days
				this.cur_today = days[idx].day
        if(this.filterIndex == 1) this.setDateQuery()
				this.getChart()
			},
			bindDateChange(e) {
				let choseDateArr = e.detail.value.split('-');
				let choose_year = choseDateArr[0] * 1;
				let choose_month = choseDateArr[1] * 1;
				this.cur_year = choose_year;
				this.cur_month = choose_month;
				this.curYearMonth = e.detail.value.replace(/-/g, '.');
				this.calculateEmptyGrids(choose_year, choose_month)
				this.calculateDays(choose_year, choose_month)
				this.getChart()
        this.refreshCalendarTab()
			},
      bindFilterChange (e) {
        let idx = e.detail.value
        if (idx == 0) {
          this.startDate = null
          this.endDate = null
          this.dateParams = []
          for(let item of this.days) {
            item.end = false
            item.start = false
          }
        }
        this.filterIndex = idx
      },
			changeTab(item) {
				this.tabActive = item
			},
			showHidden(idx) {
				let value = !this.mutipleData[idx].hidden
				this.mutipleData[idx]['hidden'] = value
				this.$apply()
			}
		}

		onLoad () {
			let cur_year = NowDate.getFullYear()
			let cur_month = NowDate.getMonth() + 1
			this.calculateEmptyGrids(cur_year, cur_month)
			this.calculateDays(cur_year, cur_month)
		}

		onShow () {
			this.getChart()
		}

    compareTime (time1, time2) {
      const d1 = new Date(Date.parse(time1))
      const d2 = new Date(Date.parse(time2))
      return d1 > d2
    }

    setDateQuery () {
      // 起始与结束日期的选择
      let year = this.cur_year
      let month = this.cur_month
      let day = this.cur_today
      let date = `${year}-${month}-${day}`
      if (this.dateParams.length == 0) {
        this.startDate = date
        this.dateParams.push(date)
      } else if (this.dateParams.length == 1) {
        this.dateParams.push(date)
        this.endDate = date
        if (this.compareTime(this.startDate, date)) {
          this.endDate = this.startDate
          this.startDate = date
        }
      } else {
        if(this.compareTime(this.startDate, date)) {
          // 选择的日期在起始日期之前
          // this.endDate = this.startDate
          this.startDate = date
        } else {
          // 选择的日期在起始日期之后
          this.endDate = date
        }
        this.dateParams = [this.startDate, this.endDate]
      }
      this.refreshCalendarTab()
    }

    refreshCalendarTab () {
      if (this.dateParams.length == 0) return false
      for(let item of this.days) {
        item.end = false
        item.start = false
      }

      if (this.startDate != null) {
        let start = new Date(Date.parse(this.startDate))
        if(start.getFullYear() == this.cur_year && start.getMonth() + 1 == this.cur_month) {
          this.days[start.getDate() - 1].start = true
        }
      }

      if (this.endDate != null) {
        let end = new Date(Date.parse(this.endDate))
        if(end.getFullYear() == this.cur_year && end.getMonth() + 1 == this.cur_month) {
          this.days[end.getDate() - 1].end = true
        }
      }
    }

		async getChart() {
      let query = {}
      if (this.dateParams.length == 0) {
        query.start_time = `${this.cur_year}-${this.cur_month}-${this.cur_today}`
      } else if (this.dateParams.length == 1) {
        query.start_time = this.startDate
      } else {
        query.start_time = this.startDate
        query.end_time = this.endDate
      }
			const res = await api.Chart({
				query: query
			});
      if (res.data.status == 200) {
				this.singleData = res.data.single
				this.singleList = this.singleData.list
			  this.mutipleData = res.data.mutiple
      } else {
				this.singleData = []
				this.singleList = []
			  this.mutipleData = []
      }
			this.$apply()
		}

		getNowFormatDate(spilt) {
			var date = new Date();
			var year = date.getFullYear();
			var month = date.getMonth() + 1;
			var strDate = date.getDate();
			if (month >= 1 && month <= 9) {
				month = "0" + month;
			}
			if (strDate >= 0 && strDate <= 9) {
				strDate = "0" + strDate;
			}
			return year + spilt + month + spilt + strDate;
		}

		calculateEmptyGrids(year, month) {
			const firstDayOfWeek = this.getFirstDayOfWeek(year, month);
			let empytGrids = [];
			if (firstDayOfWeek > 0) {
				for (let i = 0; i < firstDayOfWeek; i++) {
					empytGrids.push(i);
				}
				this.hasEmptyGrid = true
				this.empytGrids = empytGrids
			} else {
				this.hasEmptyGrid = false
				this.empytGrids = []
			}
		}

		calculateDays(year, month) {
			let days = [];
			const thisMonthDays = this.getThisMonthDays(year, month);
			for (let i = 1; i <= thisMonthDays; i++) {
				days.push({
					day: i,
					choosed: false
				});
			}
			this.days = days
		}

		getThisMonthDays(year, month) {
			return new Date(year, month, 0).getDate();
		}
		
		getFirstDayOfWeek(year, month) {
			return new Date(Date.UTC(year, month - 1, 1)).getDay();
		}

    formatMonthDay (month, day) {
      if (month < 10) {
        month = `0${month}`
      }
      if (day < 10) {
        day = `0${day}`
      }
      return `${month}-${day}`
    }

		computed = {
			monthAndDay() {
        if(this.dateParams.length < 2) {
          let month = this.cur_month
          let today = this.cur_today
          if (this.startDate != null) {
            let date = new Date(Date.parse(this.startDate));
            month = date.getMonth() + 1
            today = date.getDate()
          }
          return this.formatMonthDay(month, today)
        } else {
          let date1 = new Date(Date.parse(this.startDate))
          let date2 = new Date(Date.parse(this.endDate))
          let start = this.formatMonthDay(date1.getMonth()+1, date1.getDate())
          let end = this.formatMonthDay(date2.getMonth()+1, date2.getDate())
          return `${start} ~ ${end}`
        }
      }
		}
  }
</script>
<style lang="less">
.container {
	background:#f2f2f2;
}
#calendar {
	background:white;
	margin-bottom:16rpx;
	box-shadow:0 0 10rpx #ccc;
	padding-bottom:12rpx;
}

.col999 {
	color: #999;
}
.left-amount {
	font-size: 24rpx;
	text-align: right;
	padding-top: 24rpx;
	> text {
		margin-right: 12rpx;
	}
}
// tab 样式
.ljt-tab {
	height: 80rpx;
	line-height: 80rpx;
	background: white;
	border-bottom:2rpx solid #efefef;
	.time {
		border-right: 1px solid #f4f4f4;
		color: #999;
	}
	.active {
		color: green;
		border-bottom: 2px solid green;
	}
	> view {
		display: inline-block;
		width: 33%;
		text-align: center;
	}
}

.assets {
	background: white;
	@tmHeight: 100rpx;
	// 分类查看的样式
	.mutiple {
		> .header {
			height: @tmHeight;
			line-height: @tmHeight;
			border-bottom: 1px solid #efefef;
			padding:0 24rpx;
			background:#FAFAFC;
		}
	}
}

/* 日历样式 */
#calendar {
	.box {
		display:flex;
	}
	.box-lr {
		flex-direction:row;
	}
	.box-rl {
		flex-direction:row-reverse;
	}
	.box-tb {
		flex-direction:column;
	}
	.selected-bg {
		background:#ccc;
	}
	.box-pack-center {
		justify-content:center;
	}
	.box-align-center {
		align-items:center;
	}
	.box-wrap {
		flex-wrap:wrap;
	}
	.flex {
		flex-grow:1;
	}
  .calendar-header {
    height: 80rpx;
    line-height: 80rpx;
    border-bottom:1px solid #efefef;
    padding: 0 28rpx;
    background:white;
    color:#757575;
    font-size: 40rpx;
    // border-top: 1px solid #2196F3;
    .selectDate {
      display: inline-block;
      position: relative;
      padding-right: 36rpx;
      image {
        position:absolute;
        right:0;
        top:0;
        margin-top:26rpx;
        width:30rpx;
        height:30rpx;
      }
    }
    .select-type {
      font-size: 14px;
      picker {
        display:inline-block;
      }
      image {
        width: 30rpx;
        height: 30rpx;
        float:left;
        margin-top:24rpx;
        margin-right: 8rpx;
      }
    }
  }
	
	.weeks {
		height: 60rpx;
		line-height: 60rpx;
		color:#999;
		border-bottom:2rpx solid #f3f3f3;
	}
	.week {
		text-align:center;
	}
	.days {
		height:480rpx;
	}
	.grid {
		width:107.1428571429rpx;
	}
	.day {
		width:70rpx;
		height:70rpx;
		color:black;
		font-size:32rpx;
		font-weight:400;
	}
	.border-radius {
		border-radius:50%;
		position:relative;
		left:0;
		top:0;
		color:#fff;
	}
	.today {
    background: #2196F3;
	}
  .start-bg {
    background: #FF7F00;
    &:after {
      content: '';
      position: absolute;
      bottom: -6px;
      left: 0;
      right: 0;
      width: 3px;
      height: 3px;
      text-align: center;
      background: #FF7F00;
      left: 50%;
      margin-left: -2px;
      border-radius: 50%;
    }
  }
  .end-bg {
    background: #8B8B83;
     &:after {
      content: '';
      position: absolute;
      bottom: -6px;
      left: 0;
      right: 0;
      width: 3px;
      height: 3px;
      text-align: center;
      background: #8B8B83;
      left: 50%;
      margin-left: -2px;
      border-radius: 50%;
    }
  }
}
</style>
